<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.UserMapper">

    <!-- 用户结果映射 -->
    <resultMap id="UserResultMap" type="com.noncore.assessment.entity.User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <result column="role" property="role"/>
        <result column="avatar" property="avatar"/>
        <result column="nickname" property="nickname"/>
        <result column="first_name" property="firstName"/>
        <result column="last_name" property="lastName"/>
        <result column="student_no" property="studentNo"/>
        <result column="teacher_no" property="teacherNo"/>
        <result column="bio" property="bio"/>
        <result column="gender" property="gender"/>
        <result column="mbti" property="mbti"/>
        <result column="birthday" property="birthday"/>
        <result column="country" property="country"/>
        <result column="province" property="province"/>
        <result column="city" property="city"/>
        <result column="grade" property="grade"/>
        <result column="subject" property="subject"/>
        <result column="school" property="school"/>
        <result column="phone" property="phone"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="deleted" property="deleted"/>
        <result column="email_verified" property="emailVerified"/>
    </resultMap>

    <!-- 基础查询字段 -->
    <sql id="userColumns">
        id, username, email, password, role, avatar, nickname, first_name, last_name,
        student_no, teacher_no, gender, mbti, bio, birthday, country, province, city, phone, school, subject, grade, email_verified, deleted,
        created_at, updated_at
    </sql>

    <!-- 带别名的基础查询字段 -->
    <sql id="aliasedUserColumns">
        u.id, u.username, u.email, u.password, u.role, u.avatar, u.nickname, u.first_name, u.last_name,
        u.student_no, u.teacher_no, u.gender, u.mbti, u.bio, u.birthday, u.country, u.province, u.city, u.phone, u.school, u.subject, u.grade,
        u.email_verified, u.deleted, u.created_at, u.updated_at
    </sql>

    <!-- 插入用户 -->
    <insert id="insertUser" parameterType="com.noncore.assessment.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (
            username, email, password, role, avatar, nickname, first_name, last_name,
            student_no, teacher_no, gender, mbti, bio, birthday, country, province, city, phone, school, subject, grade,
            email_verified, deleted, created_at, updated_at
        ) VALUES (
            #{username}, #{email}, #{password}, #{role}, #{avatar}, #{nickname}, #{firstName}, #{lastName},
            #{studentNo}, #{teacherNo}, #{gender}, #{mbti}, #{bio}, #{birthday}, #{country}, #{province}, #{city}, #{phone}, #{school}, #{subject}, #{grade},
            #{emailVerified}, #{deleted}, #{createdAt}, #{updatedAt}
        )
    </insert>

    <!-- 根据ID查询用户 -->
    <select id="selectUserById" parameterType="long" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE id = #{id} AND deleted = false
    </select>

    <!-- 根据课程ID查询学生（高级筛选/排序 - 预留扩展，当前仅实现关键字与排序字段白名单） -->
    <select id="selectStudentsByCourseIdAdvanced" resultMap="UserResultMap">
        SELECT <include refid="aliasedUserColumns"/>
        FROM users u
        INNER JOIN enrollments e ON u.id = e.student_id
        WHERE e.course_id = #{courseId}
          AND u.deleted = false
          AND e.status IN ('active','completed')
        <if test="keyword != null and keyword != ''">
          AND (
              u.nickname LIKE #{keyword}
              OR u.username LIKE #{keyword}
              OR u.student_no LIKE #{keyword}
              OR u.teacher_no LIKE #{keyword}
          )
        </if>
        <!-- TODO: 当有对应维度统计表时，联表支持 activity/grade/progress 过滤 -->
        <choose>
          <when test="sortBy == 'name'"> ORDER BY u.nickname ASC, u.username ASC </when>
          <when test="sortBy == 'joinDate'"> ORDER BY e.enrolled_at DESC </when>
          <otherwise> ORDER BY e.enrolled_at DESC </otherwise>
        </choose>
    </select>
    <!-- 根据用户名查询用户 -->
    <select id="selectUserByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE username = #{username} AND deleted = false
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectUserByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE email = #{email} AND deleted = false
    </select>

    <!-- 更新用户信息 -->
    <update id="updateUser" parameterType="com.noncore.assessment.entity.User">
        UPDATE users
        <set>
            <if test="username != null and username != ''">username = #{username},</if>
            <if test="email != null and email != ''">email = #{email},</if>
            <if test="avatar != null and avatar != ''">avatar = #{avatar},</if>
            <if test="nickname != null and nickname != ''">nickname = #{nickname},</if>
            <if test="gender != null and gender != ''">gender = #{gender},</if>
            <if test="mbti != null and mbti != ''">mbti = #{mbti},</if>
            <if test="firstName != null and firstName != ''">first_name = #{firstName},</if>
            <if test="lastName != null and lastName != ''">last_name = #{lastName},</if>
            <if test="studentNo != null and studentNo != ''">student_no = #{studentNo},</if>
            <if test="teacherNo != null and teacherNo != ''">teacher_no = #{teacherNo},</if>
            <if test="bio != null">bio = #{bio},</if>
            <if test="grade != null and grade != ''">grade = #{grade},</if>
            <if test="subject != null and subject != ''">subject = #{subject},</if>
            <if test="school != null and school != ''">school = #{school},</if>
            <if test="phone != null and phone != ''">phone = #{phone},</if>
            <if test="birthday != null">birthday = #{birthday},</if>
            <if test="country != null and country != ''">country = #{country},</if>
            <if test="province != null and province != ''">province = #{province},</if>
            <if test="city != null and city != ''">city = #{city},</if>
            <if test="updatedAt != null">updated_at = #{updatedAt},</if>
        </set>
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 更新用户邮箱验证状态 -->
    <update id="updateEmailVerified">
        UPDATE users
        SET email_verified = #{isVerified},
            updated_at = NOW()
        WHERE id = #{userId} AND deleted = false
    </update>

    <!-- 更新密码 -->
    <update id="updatePassword">
        UPDATE users SET 
            password = #{password},
            updated_at = NOW()
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 更新最后登录时间 -->
    <update id="updateLastLoginTime">
        UPDATE users SET 
            updated_at = NOW()
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 软删除用户 -->
    <update id="deleteUser" parameterType="long">
        UPDATE users SET 
            deleted = true,
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 检查用户名是否存在 -->
    <select id="checkUsernameExists" resultType="int">
        SELECT COUNT(1) FROM users 
        WHERE username = #{username} AND deleted = false
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <!-- 检查邮箱是否存在 -->
    <select id="checkEmailExists" resultType="int">
        SELECT COUNT(1) FROM users 
        WHERE email = #{email} AND deleted = false
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <!-- 检查学号是否存在 -->
    <select id="checkStudentNoExists" resultType="int">
        SELECT COUNT(1) FROM users
        WHERE student_no = #{studentNo} AND deleted = false
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <!-- 检查工号是否存在 -->
    <select id="checkTeacherNoExists" resultType="int">
        SELECT COUNT(1) FROM users
        WHERE teacher_no = #{teacherNo} AND deleted = false
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <!-- 根据角色查询用户列表 -->
    <select id="selectUsersByRole" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE role = #{role} AND deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 分页查询用户 -->
    <select id="selectUsersWithPagination" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE deleted = false
        <if test="role != null and role != ''">
            AND role = #{role}
        </if>
        <if test="keyword != null and keyword != ''">
             AND (username LIKE CONCAT('%', #{keyword}, '%') 
                  OR email LIKE CONCAT('%', #{keyword}, '%')
                  OR nickname LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        ORDER BY created_at DESC
    </select>

    <!-- 根据课程ID查询已选课学生 -->
    <select id="selectStudentsByCourseId" parameterType="long" resultMap="UserResultMap">
        SELECT <include refid="aliasedUserColumns"/>
        FROM users u
        INNER JOIN enrollments e ON u.id = e.student_id
        WHERE e.course_id = #{courseId} AND u.deleted = false AND e.status IN ('active','completed')
        ORDER BY e.enrolled_at DESC
    </select>

    <!-- 判定是否为课程学生（active/completed 状态） -->
    <select id="isStudentInCourse" resultType="int">
        SELECT COUNT(1)
        FROM enrollments e
        WHERE e.course_id = #{courseId}
          AND e.student_id = #{userId}
          AND e.status IN ('active','completed')
    </select>

    <!-- 根据课程ID查询学生（带搜索：昵称/用户名/学号/工号） -->
    <select id="selectStudentsByCourseIdWithSearch" resultMap="UserResultMap">
        SELECT <include refid="aliasedUserColumns"/>
        FROM users u
        INNER JOIN enrollments e ON u.id = e.student_id
        WHERE e.course_id = #{courseId}
          AND u.deleted = false
          AND e.status IN ('active','completed')
          AND (
              u.nickname LIKE #{keyword}
              OR u.username LIKE #{keyword}
              OR u.student_no LIKE #{keyword}
              OR u.teacher_no LIKE #{keyword}
          )
        ORDER BY e.enrolled_at DESC
    </select>

    <!-- 批量更新用户状态 -->
    <update id="batchUpdateUserStatus">
        UPDATE users SET 
            deleted = #{deleted},
            updated_at = NOW()
        WHERE id IN 
        <foreach collection="userIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <!-- 获取教师的学生概览列表 -->
    <select id="findStudentOverviewsByTeacher" resultType="com.noncore.assessment.dto.response.TeacherDashboardResponse$StudentOverviewDto">
        SELECT
            u.id,
            COALESCE(u.nickname, u.username) AS nickname,
            u.avatar,
            stats.avg_grade AS avgGrade,
            stats.avg_progress AS avgProgress,
            stats.last_active AS lastActive
        FROM users u
        JOIN (
            SELECT
                e.student_id,
                COALESCE(AVG(g.score), 0) as avg_grade,
                COALESCE(AVG(lp.progress), 0) as avg_progress,
                MAX(e.last_access_time) as last_active
            FROM enrollments e
            JOIN courses c ON e.course_id = c.id
            LEFT JOIN grades g ON e.student_id = g.student_id AND e.course_id = (SELECT course_id FROM assignments WHERE id = g.assignment_id LIMIT 1)
            LEFT JOIN lessons l ON e.course_id = l.course_id
            LEFT JOIN lesson_progress lp ON e.student_id = lp.student_id AND l.id = lp.lesson_id
            WHERE c.teacher_id = #{teacherId}
            GROUP BY e.student_id
        ) stats ON u.id = stats.student_id
        WHERE u.deleted = false
        ORDER BY stats.last_active DESC
        LIMIT #{limit}
    </select>

    <!-- 统计用户数量 -->
    <select id="countUsers" resultType="long">
        SELECT COUNT(1) FROM users 
        WHERE deleted = false
        <if test="role != null and role != ''">
            AND role = #{role}
        </if>
    </select>

    <!-- 查询活跃用户（最近30天有活动） -->
    <select id="selectActiveUsers" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE deleted = false AND updated_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)
        ORDER BY updated_at DESC
        LIMIT #{limit}
    </select>

    <!-- 根据ID列表查询用户 -->
    <select id="selectUsersByIds" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE deleted = false AND id IN
        <foreach collection="userIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

</mapper> 
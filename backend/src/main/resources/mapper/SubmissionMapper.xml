<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.noncore.assessment.mapper.SubmissionMapper">

    <!-- 结果映射 -->
    <resultMap id="SubmissionResultMap" type="com.noncore.assessment.entity.Submission">
        <id property="id" column="id"/>
        <result property="assignmentId" column="assignment_id"/>
        <result property="studentId" column="student_id"/>
        <result property="content" column="content"/>
        <result property="fileName" column="file_name"/>
        <result property="filePath" column="file_path"/>
        <result property="submissionCount" column="submission_count"/>
        <result property="status" column="status"/>
        <result property="submittedAt" column="submitted_at"/>
        <result property="isLate" column="is_late"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <!-- 冗余显示字段 -->
        <result property="assignmentTitle" column="assignment_title"/>
        <result property="studentName" column="student_name"/>
        <result property="courseName" column="course_name"/>
        <result property="avatar" column="avatar"/>
    </resultMap>

    <!-- 基础字段列表 -->
    <sql id="Base_Column_List">
        s.id, s.assignment_id, s.student_id, s.content, s.file_name, s.file_path,
        s.submission_count, s.status, s.submitted_at, s.is_late, s.created_at, s.updated_at
    </sql>

    <!-- 插入提交记录 -->
    <insert id="insertSubmission" parameterType="com.noncore.assessment.entity.Submission" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO submissions (
            assignment_id, student_id, content, file_name, file_path,
            submission_count, status, submitted_at, is_late, created_at, updated_at
        ) VALUES (
                     #{assignmentId}, #{studentId}, #{content}, #{fileName}, #{filePath},
                     #{submissionCount}, #{status}, #{submittedAt}, #{isLate}, #{createdAt}, #{updatedAt}
                 )
    </insert>

    <!-- 根据ID查询提交 -->
    <select id="selectSubmissionById" resultMap="SubmissionResultMap">
        SELECT
        <include refid="Base_Column_List"/>,
        a.title AS assignment_title,
            COALESCE(u.nickname, u.username) AS student_name,
        c.title AS course_name,
        u.avatar AS avatar
        FROM submissions s
        LEFT JOIN assignments a ON s.assignment_id = a.id
        LEFT JOIN users u ON s.student_id = u.id
        LEFT JOIN courses c ON a.course_id = c.id
        WHERE s.id = #{id}
    </select>

    <!-- 更新提交记录 -->
    <update id="updateSubmission" parameterType="com.noncore.assessment.entity.Submission">
        UPDATE submissions
        SET
            content = #{content},
            file_name = #{fileName},
            file_path = #{filePath},
            submission_count = #{submissionCount},
            status = #{status},
            submitted_at = #{submittedAt},
            is_late = #{isLate},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 删除提交记录 -->
    <delete id="deleteSubmission">
        DELETE FROM submissions WHERE id = #{id}
    </delete>

    <!-- 根据作业ID和学生ID查询提交 -->
    <select id="selectByAssignmentAndStudent" resultMap="SubmissionResultMap">
        SELECT
        <include refid="Base_Column_List"/>,
        a.title AS assignment_title,
        c.title AS course_name,
        u.avatar AS avatar
        FROM submissions s
        LEFT JOIN assignments a ON s.assignment_id = a.id
        LEFT JOIN courses c ON a.course_id = c.id
        LEFT JOIN users u ON s.student_id = u.id
        WHERE s.assignment_id = #{assignmentId} AND s.student_id = #{studentId}
        ORDER BY s.created_at DESC
        LIMIT 1
    </select>

    <!-- 根据学生ID查询提交列表 -->
    <select id="selectByStudentId" resultMap="SubmissionResultMap">
        SELECT
        <include refid="Base_Column_List"/>,
        a.title AS assignment_title,
        c.title AS course_name,
        u.avatar AS avatar
        FROM submissions s
        LEFT JOIN assignments a ON s.assignment_id = a.id
        LEFT JOIN courses c ON a.course_id = c.id
        LEFT JOIN users u ON s.student_id = u.id
        WHERE s.student_id = #{studentId}
        ORDER BY s.created_at DESC
    </select>

    <!-- 分页查询学生提交 -->
    <select id="selectByStudentIdWithPagination" resultMap="SubmissionResultMap">
        SELECT
        <include refid="Base_Column_List"/>,
        a.title AS assignment_title,
        c.title AS course_name,
        u.avatar AS avatar
        FROM submissions s
        LEFT JOIN assignments a ON s.assignment_id = a.id
        LEFT JOIN courses c ON a.course_id = c.id
        LEFT JOIN users u ON s.student_id = u.id
        WHERE s.student_id = #{studentId}
        ORDER BY s.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 统计学生提交数量 -->
    <select id="countByStudentId" resultType="long">
        SELECT COUNT(*) FROM submissions WHERE student_id = #{studentId}
    </select>

    <!-- 根据作业ID查询提交列表 -->
    <select id="selectByAssignmentId" resultMap="SubmissionResultMap">
        SELECT
        <include refid="Base_Column_List"/>,
            COALESCE(u.nickname, u.username) AS student_name,
            u.avatar AS avatar
        FROM submissions s
        LEFT JOIN users u ON s.student_id = u.id
        WHERE s.assignment_id = #{assignmentId}
        ORDER BY s.created_at DESC
    </select>

    <!-- 分页查询作业提交 -->
    <select id="selectByAssignmentIdWithPagination" resultMap="SubmissionResultMap">
        SELECT
        <include refid="Base_Column_List"/>,
            COALESCE(u.nickname, u.username) AS student_name,
            u.avatar AS avatar
        FROM submissions s
        LEFT JOIN users u ON s.student_id = u.id
        WHERE s.assignment_id = #{assignmentId}
        ORDER BY s.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 统计作业提交数量 -->
    <select id="countByAssignmentId" resultType="long">
        SELECT COUNT(*) FROM submissions WHERE assignment_id = #{assignmentId}
    </select>

    <!-- 获取学生成绩列表（关联查询，分页） -->
    <select id="selectStudentGradesWithPagination" resultType="java.util.Map">
        SELECT
            s.id AS submission_id,
            a.id AS assignment_id,
            a.title AS assignment_title,
            c.title AS course_name,
            s.submitted_at,
            s.status,
            g.score,
            g.max_score,
            g.percentage,
            g.grade_level,
            g.feedback,
            g.updated_at AS graded_at
        FROM submissions s
                 LEFT JOIN assignments a ON s.assignment_id = a.id
                 LEFT JOIN courses c ON a.course_id = c.id
                 LEFT JOIN grades g ON g.student_id = s.student_id AND g.assignment_id = s.assignment_id
        WHERE s.student_id = #{studentId}
        ORDER BY s.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 统计学生成绩数量 -->
    <select id="countStudentGrades" resultType="long">
        SELECT COUNT(*) FROM submissions s
                                 LEFT JOIN grades g ON g.student_id = s.student_id AND g.assignment_id = s.assignment_id
        WHERE s.student_id = #{studentId}
    </select>

    <!-- 统计作业提交（排除软删除），如无deleted字段则与 countByAssignmentId 等价 -->
    <select id="countByAssignment" resultType="long">
        SELECT COUNT(*) FROM submissions WHERE assignment_id = #{assignmentId}
    </select>

    <!-- 获取提交的成绩详情 -->
    <select id="selectSubmissionGrade" resultType="java.util.Map">
        SELECT
            s.id AS submission_id,
            a.id AS assignment_id,
            a.title AS assignment_title,
            c.title AS course_name,
            s.content AS submission_content,
            s.file_name,
            s.file_path,
            s.submitted_at,
            s.is_late,
            g.id AS grade_id,
            g.status AS grade_status,
            g.resubmit_until AS resubmit_until,
            g.score,
            g.max_score,
            g.percentage,
            g.grade_level,
            g.feedback,
            g.updated_at AS graded_at,
            COALESCE(t.nickname, t.username) AS teacher_name,
            agg.avg_score,
            ec.total_students,
            rnk.student_rank,
            u.avatar AS avatar
        FROM submissions s
                 LEFT JOIN assignments a ON s.assignment_id = a.id
                 LEFT JOIN courses c ON a.course_id = c.id
                 LEFT JOIN grades g ON g.student_id = s.student_id AND g.assignment_id = s.assignment_id
                 LEFT JOIN users t ON a.teacher_id = t.id
                 LEFT JOIN users u ON s.student_id = u.id
                 LEFT JOIN (
                    SELECT assignment_id, AVG(score) AS avg_score
                    FROM grades
                    WHERE score IS NOT NULL AND status = 'published'
                    GROUP BY assignment_id
                 ) agg ON agg.assignment_id = a.id
                 LEFT JOIN (
                    SELECT e.course_id, COUNT(e.student_id) AS total_students
                    FROM enrollments e
                    WHERE e.status IN ('active','completed')
                    GROUP BY e.course_id
                 ) ec ON ec.course_id = a.course_id
                 LEFT JOIN (
                    SELECT gx.assignment_id, gx.student_id,
                           1 + (SELECT COUNT(*) FROM grades gy WHERE gy.assignment_id = gx.assignment_id AND gy.score IS NOT NULL AND gy.score > gx.score) AS student_rank
                    FROM grades gx
                 ) rnk ON rnk.assignment_id = a.id AND rnk.student_id = s.student_id
        WHERE s.id = #{submissionId}
    </select>

    <!-- 更新提交状态 -->
    <update id="updateSubmissionStatus">
        UPDATE submissions
        SET status = #{status}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 获取作业提交统计 -->
    <select id="getSubmissionStatistics" resultType="java.util.Map">
        SELECT
            COUNT(*) AS total_submissions,
            COUNT(CASE WHEN status = 'submitted' THEN 1 END) AS submitted_count,
            COUNT(CASE WHEN status = 'graded' THEN 1 END) AS graded_count,
            COUNT(CASE WHEN is_late = 1 THEN 1 END) AS late_count
        FROM submissions
        WHERE assignment_id = #{assignmentId}
    </select>

    <!-- 检查学生是否已提交 -->
    <select id="countByAssignmentAndStudent" resultType="long">
        SELECT COUNT(*) FROM submissions
        WHERE assignment_id = #{assignmentId} AND student_id = #{studentId}
    </select>

    <!-- 统计教师的待批改作业数 -->
    <select id="countPendingByTeacher" resultType="long">
        SELECT COUNT(s.id)
        FROM submissions s
                 JOIN assignments a ON s.assignment_id = a.id
        WHERE a.teacher_id = #{teacherId}
          AND s.status = 'submitted'
    </select>

    <!-- 获取教师的待批改作业列表 -->
    <select id="findPendingByTeacher" resultType="com.noncore.assessment.dto.response.PendingGradingDto">
        SELECT s.id           AS submissionId,
               a.title        AS assignmentTitle,
            COALESCE(u.nickname, u.username) AS studentName,
               c.title        AS courseTitle,
               s.submitted_at AS submittedAt,
               a.due_date     AS dueDate
        FROM submissions s
                 JOIN assignments a ON s.assignment_id = a.id
                 JOIN users u ON s.student_id = u.id
                 JOIN courses c ON a.course_id = c.id
        WHERE a.teacher_id = #{teacherId}
          AND s.status = 'submitted'
        ORDER BY s.submitted_at
        LIMIT #{limit}
    </select>

</mapper>
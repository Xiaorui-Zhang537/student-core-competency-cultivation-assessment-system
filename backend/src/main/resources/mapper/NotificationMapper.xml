<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.NotificationMapper">

    <!-- 通知结果映射 -->
    <resultMap id="NotificationResultMap" type="com.noncore.assessment.entity.Notification">
        <id column="id" property="id"/>
        <result column="user_id" property="recipientId"/>
        <result column="sender_id" property="senderId"/>
        <result column="title" property="title"/>
        <result column="content" property="content"/>
        <result column="type" property="type"/>
        <result column="priority" property="priority"/>
        <result column="is_read" property="isRead"/>
        <result column="related_type" property="relatedType"/>
        <result column="related_id" property="relatedId"/>
        <result column="expired_at" property="expiredAt"/>
        <result column="created_at" property="createdAt"/>
        <!-- 业务拓展 -->
        <result column="category" property="category"/>
        <result column="read_at" property="readAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="deleted" property="deleted"/>
        <result column="data" property="data"/>
        <result column="icon" property="icon"/>
        <result column="action_url" property="actionUrl"/>
    <result column="conversation_id" property="conversationId"/>
    </resultMap>

    <!-- 公共列 -->
    <sql id="Base_Column_List">
        id, user_id, sender_id, title, content, type, priority, is_read, related_type, related_id, expired_at, created_at,
        <!-- 下面字段视是否加到表里自动兼容 -->
        category, read_at, updated_at, deleted, data, icon, action_url, conversation_id
    </sql>

    <!-- 插入通知 -->
    <insert id="insertNotification" parameterType="com.noncore.assessment.entity.Notification" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notifications
        <trim prefix="(" suffix=")" suffixOverrides=",">
            user_id,
            sender_id,
            title,
            content,
            type,
            priority,
            is_read,
            related_type,
            related_id,
            expired_at,
            created_at,
            <if test="category != null">category,</if>
            <if test="readAt != null">read_at,</if>
            <if test="updatedAt != null">updated_at,</if>
            <if test="deleted != null">deleted,</if>
            <if test="data != null">data,</if>
            <if test="icon != null">icon,</if>
            <if test="actionUrl != null">action_url,</if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{recipientId},
            #{senderId},
            #{title},
            #{content},
            #{type},
            #{priority},
            #{isRead},
            #{relatedType},
            #{relatedId},
            #{expiredAt},
            #{createdAt},
            <if test="category != null">#{category},</if>
            <if test="readAt != null">#{readAt},</if>
            <if test="updatedAt != null">#{updatedAt},</if>
            <if test="deleted != null">#{deleted},</if>
            <if test="data != null">#{data},</if>
            <if test="icon != null">#{icon},</if>
            <if test="actionUrl != null">#{actionUrl},</if>
        </trim>
    </insert>

    <!-- 批量插入 -->
    <insert id="batchInsertNotifications" parameterType="java.util.List">
        INSERT INTO notifications (
        user_id, sender_id, title, content, type, priority, is_read, related_type, related_id, expired_at, created_at, updated_at, deleted
        ) VALUES
        <foreach collection="notifications" item="item" separator=",">
            (#{item.recipientId}, #{item.senderId}, #{item.title}, #{item.content}, #{item.type}, #{item.priority}, #{item.isRead}, #{item.relatedType}, #{item.relatedId}, #{item.expiredAt}, #{item.createdAt}, #{item.updatedAt}, #{item.deleted})
        </foreach>
    </insert>

    <!-- 查询 -->
    <select id="selectNotificationById" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE id = #{id} AND deleted = 0
    </select>

    <select id="selectByRecipientId" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE user_id = #{recipientId} AND deleted = 0
        ORDER BY created_at DESC
    </select>

    <select id="selectBySenderId" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE sender_id = #{senderId} AND deleted = 0
        ORDER BY created_at DESC
    </select>

    <!-- 会话：双方消息（我->对方 或 对方->我）按时间升序 -->
    <select id="selectConversationBetween" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE deleted = 0
          AND (
              (user_id = #{userId} AND sender_id = #{peerId})
              OR (user_id = #{peerId} AND sender_id = #{userId})
          )
          <if test="courseId != null">
            AND (
              related_id = #{courseId}
              OR related_id IS NULL
              OR related_id = 0
            )
          </if>
          AND type = 'message'
        ORDER BY created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <select id="countConversationBetween" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notifications
        WHERE deleted = 0
          AND (
              (user_id = #{userId} AND sender_id = #{peerId})
              OR (user_id = #{peerId} AND sender_id = #{userId})
          )
          <if test="courseId != null">
            AND (
              related_id = #{courseId}
              OR related_id IS NULL
              OR related_id = 0
            )
          </if>
          AND type = 'message'
    </select>

  <update id="setConversationId">
    UPDATE notifications
    SET conversation_id = #{conversationId}
    WHERE id = #{id}
  </update>

    <select id="selectByRecipientAndType" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE user_id = #{recipientId} AND type = #{type} AND deleted = 0
        ORDER BY created_at DESC
    </select>

    <!-- 分页 -->
    <select id="selectByRecipientWithPagination" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE user_id = #{recipientId} AND deleted = 0
        <if test="type != null and type != ''">
            AND type = #{type}
        </if>
        ORDER BY created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 总数 -->
    <select id="countByRecipient" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notifications
        WHERE user_id = #{recipientId} AND deleted = 0
        <if test="type != null and type != ''">
            AND type = #{type}
        </if>
    </select>

    <!-- 按类型统计未读 -->
    <select id="countUnreadByRecipientWithType" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notifications
        WHERE user_id = #{recipientId} AND is_read = 0 AND deleted = 0
          AND type = #{type}
    </select>

    <!-- 统计未读 -->
    <select id="countUnreadByRecipient" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notifications
        WHERE user_id = #{recipientId} AND is_read = 0 AND deleted = 0
    </select>

    <!-- 更新通知 -->
    <update id="updateNotification" parameterType="com.noncore.assessment.entity.Notification">
        UPDATE notifications SET
        title = #{title},
        content = #{content},
        type = #{type},
        priority = #{priority},
        related_type = #{relatedType},
        related_id = #{relatedId},
        expired_at = #{expiredAt},
        updated_at = NOW(),
        <if test="category != null">category = #{category},</if>
        <if test="readAt != null">read_at = #{readAt},</if>
        <if test="deleted != null">deleted = #{deleted},</if>
        <if test="data != null">data = #{data},</if>
        <if test="icon != null">icon = #{icon},</if>
        <if test="actionUrl != null">action_url = #{actionUrl},</if>
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 标记为已读 -->
    <update id="markAsRead">
        UPDATE notifications
        SET is_read = 1, read_at = NOW(), updated_at = NOW()
        WHERE id = #{id} AND deleted = 0
    </update>

    <!-- 批量标记为已读 -->
    <update id="batchMarkAsRead">
        UPDATE notifications
        SET is_read = 1, read_at = NOW(), updated_at = NOW()
        WHERE id IN
        <foreach collection="notificationIds" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        AND user_id = #{userId} AND deleted = 0
    </update>

    <!-- 全部标记为已读 -->
    <update id="markAllAsReadByRecipient">
        UPDATE notifications
        SET is_read = 1, read_at = NOW(), updated_at = NOW()
        WHERE user_id = #{recipientId} AND is_read = 0 AND deleted = 0
    </update>

    <!-- 软删除 -->
    <update id="deleteNotification">
        UPDATE notifications
        SET deleted = 1, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 获取最近通知 -->
    <select id="selectRecentNotifications" resultMap="NotificationResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notifications
        WHERE user_id = #{userId} AND deleted = 0
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 获取最近通知（学生仪表盘DTO） -->
    <select id="findRecentNotifications" resultType="com.noncore.assessment.dto.response.StudentDashboardResponse$RecentNotificationDto">
        SELECT 
            id,
            title,
            content,
            type,
            is_read AS isRead,
            DATE_FORMAT(created_at, '%Y-%m-%d %H:%i:%s') AS createdAt
        FROM notifications
        WHERE user_id = #{recipientId} AND deleted = 0
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 按类型分组统计数量 -->
    <select id="countByRecipientGroupByType" resultType="map">
        SELECT type, COUNT(*) as count
        FROM notifications
        WHERE user_id = #{userId} AND deleted = 0
        GROUP BY type
    </select>

    <!-- 清理过期通知 -->
    <delete id="deleteExpiredNotifications">
        DELETE FROM notifications
        WHERE expired_at &lt;= #{cutoffDate}
    </delete>

</mapper>
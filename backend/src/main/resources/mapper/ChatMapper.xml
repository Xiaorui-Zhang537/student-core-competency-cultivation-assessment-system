<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.ChatMapper">

  <!-- 最近会话列表：基于 chat_conversations / chat_conversation_members / notifications / users -->
  <select id="listConversations" resultType="map">
    SELECT
      c.id                  AS id,
      c.course_id           AS courseId,
      c.last_message_id     AS lastMessageId,
      c.last_message_at     AS lastMessageAt,
      m.unread_count        AS unread,
      m.pinned              AS pinned,
      m.archived            AS archived,
      -- 对端用户（peer）
      CASE WHEN c.peer_a_id = #{userId} THEN c.peer_b_id ELSE c.peer_a_id END AS peerId,
      COALESCE(u.nickname, u.username) AS peerUsername,
      u.avatar              AS peerAvatar,
      -- 最近一条消息内容
      n.content             AS lastContent
    FROM chat_conversations c
    JOIN chat_conversation_members m ON m.conversation_id = c.id AND m.user_id = #{userId}
    LEFT JOIN notifications n ON n.id = c.last_message_id
    LEFT JOIN users u ON u.id = (CASE WHEN c.peer_a_id = #{userId} THEN c.peer_b_id ELSE c.peer_a_id END)
    <where>
      <if test="pinned != null"> AND m.pinned = #{pinned} </if>
      <if test="archived != null"> AND m.archived = #{archived} </if>
    </where>
    ORDER BY m.pinned DESC, c.last_message_at DESC
    LIMIT #{offset}, #{size}
  </select>

  <select id="countConversations" resultType="long">
    SELECT COUNT(*)
    FROM chat_conversations c
    JOIN chat_conversation_members m ON m.conversation_id = c.id AND m.user_id = #{userId}
    <where>
      <if test="pinned != null"> AND m.pinned = #{pinned} </if>
      <if test="archived != null"> AND m.archived = #{archived} </if>
    </where>
  </select>

  <!-- 标记会话为已读：将我为接收者的未读消息标记为已读 -->
  <update id="markConversationRead">
    UPDATE notifications
    SET is_read = 1,
        read_at = NOW(),
        updated_at = NOW()
    WHERE conversation_id = #{conversationId}
      AND user_id = #{userId}
      AND type = 'message'
      AND (is_read = 0 OR is_read IS NULL)
  </update>

  <!-- 重新计算未读数（返回剩余未读） -->
  <select id="recalcUnread" resultType="int">
    SELECT COUNT(*)
    FROM notifications
    WHERE conversation_id = #{conversationId}
      AND user_id = #{userId}
      AND type = 'message'
      AND (is_read = 0 OR is_read IS NULL)
  </select>

  <!-- 查找或创建会话相关操作 -->
  <select id="findConversationId" resultType="long">
    SELECT id
    FROM chat_conversations
    WHERE peer_a_id = LEAST(#{peerA}, #{peerB})
      AND peer_b_id = GREATEST(#{peerA}, #{peerB})
      AND course_id = COALESCE(#{courseId}, 0)
    LIMIT 1
  </select>

  <insert id="insertConversation">
    INSERT INTO chat_conversations (type, peer_a_id, peer_b_id, course_id, last_message_id, last_message_at, created_at, updated_at)
    VALUES ('direct', LEAST(#{peerA}, #{peerB}), GREATEST(#{peerA}, #{peerB}), COALESCE(#{courseId}, 0), #{lastMessageId}, #{lastMessageAt}, NOW(), NOW())
  </insert>

  <update id="updateConversationLast">
    UPDATE chat_conversations
    SET last_message_id = #{lastMessageId},
        last_message_at = #{lastMessageAt},
        updated_at = NOW()
    WHERE id = #{conversationId}
  </update>

  <insert id="ensureMember">
    INSERT IGNORE INTO chat_conversation_members (conversation_id, user_id, unread_count, pinned, archived, created_at, updated_at)
    VALUES (#{conversationId}, #{userId}, 0, 0, 0, NOW(), NOW())
  </insert>

  <update id="incrementUnread">
    UPDATE chat_conversation_members
    SET unread_count = unread_count + 1, updated_at = NOW()
    WHERE conversation_id = #{conversationId} AND user_id = #{userId}
  </update>

  <update id="setArchived">
    UPDATE chat_conversation_members
    SET archived = #{archived}, updated_at = NOW()
    WHERE conversation_id = #{conversationId} AND user_id = #{userId}
  </update>

  <update id="resetUnread">
    UPDATE chat_conversation_members
    SET unread_count = 0, updated_at = NOW()
    WHERE conversation_id = #{conversationId} AND user_id = #{userId}
  </update>

  <!-- 将未读数设置为指定值（用于标记已读后与 notifications 校准） -->
  <update id="setUnreadCount">
    UPDATE chat_conversation_members
    SET unread_count = #{unreadCount}, updated_at = NOW()
    WHERE conversation_id = #{conversationId} AND user_id = #{userId}
  </update>

  <select id="getUnreadTotal" resultType="int">
    SELECT COALESCE(SUM(unread_count), 0)
    FROM chat_conversation_members
    WHERE user_id = #{userId}
  </select>

</mapper>



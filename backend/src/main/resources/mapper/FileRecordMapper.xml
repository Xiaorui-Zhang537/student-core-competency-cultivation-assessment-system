<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.FileRecordMapper">

    <resultMap id="FileRecordResultMap" type="com.noncore.assessment.entity.FileRecord">
        <id column="id" property="id"/>
        <result column="original_name" property="originalName"/>
        <result column="saved_name" property="storedName"/>
        <result column="file_path" property="filePath"/>
        <result column="file_size" property="fileSize"/>
        <result column="file_type" property="fileType"/>
        <result column="mime_type" property="mimeType"/>
        <result column="uploader_id" property="uploaderId"/>
        <result column="related_type" property="relatedType"/>
        <result column="related_id" property="relatedId"/>
        <result column="download_count" property="downloadCount"/>
        <result column="created_at" property="createdAt"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, original_name, saved_name, file_path, file_size, file_type, mime_type,
        uploader_id, related_type, related_id, download_count, created_at
    </sql>

    <!-- 插入文件记录 -->
    <insert id="insertFileRecord" parameterType="com.noncore.assessment.entity.FileRecord" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO file_records (
            original_name, saved_name, file_path, file_size, file_type, mime_type,
            uploader_id, related_type, related_id, download_count, created_at
        ) VALUES (
                     #{originalName}, #{storedName}, #{filePath}, #{fileSize}, #{fileType}, #{mimeType},
                     #{uploaderId}, #{relatedType}, #{relatedId}, #{downloadCount}, #{createdAt}
                 )
    </insert>

    <!-- 根据ID查询文件记录 -->
    <select id="selectFileRecordById" parameterType="java.lang.Long" resultMap="FileRecordResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM file_records
        WHERE id = #{id}
    </select>

    <!-- 根据上传者ID查询文件列表 -->
    <select id="selectByUploaderId" parameterType="java.lang.Long" resultMap="FileRecordResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM file_records
        WHERE uploader_id = #{uploaderId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据用途和关联ID查询文件列表 -->
    <select id="selectByPurposeAndRelatedId" resultMap="FileRecordResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM file_records
        WHERE related_type = #{purpose} AND related_id = #{relatedId}
        ORDER BY created_at DESC
    </select>

    <!-- 根据上传者与关联类型查询文件列表 -->
    <select id="selectByUploaderIdAndRelatedType" resultMap="FileRecordResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM file_records
        WHERE uploader_id = #{uploaderId} AND related_type = #{relatedType}
        ORDER BY created_at DESC
    </select>

    <!-- 根据用途与关联ID删除文件记录 -->
    <delete id="deleteByPurposeAndRelatedId">
        DELETE FROM file_records WHERE related_type = #{purpose} AND related_id = #{relatedId}
    </delete>

    <!-- 更新文件记录 -->
    <update id="updateFileRecord" parameterType="com.noncore.assessment.entity.FileRecord">
        UPDATE file_records SET
                                original_name = #{originalName},
                                saved_name = #{storedName},
                                file_path = #{filePath},
                                file_size = #{fileSize},
                                file_type = #{fileType},
                                mime_type = #{mimeType},
                                uploader_id = #{uploaderId},
                                related_type = #{relatedType},
                                related_id = #{relatedId}
        WHERE id = #{id}
    </update>

    <!-- 通过关联表查询某节次的资料文件 -->
    <select id="selectByLessonId" parameterType="java.lang.Long" resultMap="FileRecordResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM file_records fr
        INNER JOIN lesson_materials lm ON lm.file_id = fr.id
        WHERE lm.lesson_id = #{lessonId}
        ORDER BY fr.created_at DESC
    </select>

    <!-- 清空某节次的资料关联 -->
    <delete id="deleteLessonMaterialsByLessonId" parameterType="java.lang.Long">
        DELETE FROM lesson_materials WHERE lesson_id = #{lessonId}
    </delete>

    <!-- 批量建立资料关联 -->
    <insert id="insertLessonMaterials">
        INSERT INTO lesson_materials (lesson_id, file_id, created_at)
        VALUES
        <foreach collection="fileIds" item="fid" separator=",">
            (#{lessonId}, #{fid}, NOW())
        </foreach>
    </insert>

    <!-- 按文件ID清理关联 -->
    <delete id="deleteLessonMaterialsByFileId" parameterType="java.lang.Long">
        DELETE FROM lesson_materials WHERE file_id = #{fileId}
    </delete>

    <!-- 删除文件记录（软删除，只做物理删除时这样写，逻辑删除需有deleted字段） -->
    <delete id="deleteFileRecord" parameterType="java.lang.Long">
        DELETE FROM file_records
        WHERE id = #{id}
    </delete>

    <!-- 增加下载次数 -->
    <update id="incrementDownloadCount" parameterType="java.lang.Long">
        UPDATE file_records SET
            download_count = download_count + 1
        WHERE id = #{id}
    </update>

    <!-- 根据文件类型统计数量 -->
    <select id="countByFileType" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM file_records
        WHERE file_type = #{fileType}
    </select>

    <!-- 获取用户存储使用量 -->
    <select id="getUserStorageUsage" parameterType="java.lang.Long" resultType="java.lang.Long">
        SELECT COALESCE(SUM(file_size), 0)
        FROM file_records
        WHERE uploader_id = #{userId}
    </select>

    <!-- 根据ID集合查询文件记录 -->
    <select id="selectByIds" parameterType="list" resultMap="FileRecordResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM file_records
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- 批量重绑定文件到新的用途与关联ID -->
    <update id="updateRelatedByIds">
        UPDATE file_records
        SET related_type = #{newPurpose}, related_id = #{newRelatedId}
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.LessonProgressMapper">

    <!-- 结果映射 -->
    <resultMap id="LessonProgressResultMap" type="com.noncore.assessment.entity.LessonProgress">
        <id     column="id"             property="id"/>
        <result column="student_id"     property="studentId"/>
        <result column="lesson_id"      property="lessonId"/>
        <result column="course_id"      property="courseId"/>
        <result column="progress"       property="progress"/>
        <result column="completed"      property="completed"/>
        <result column="watch_time"     property="studyDuration"/>
        <result column="view_count"     property="viewCount"/>
        <result column="last_position"  property="lastPosition"/>
        <result column="status"         property="status"/>
        <result column="notes"          property="notes"/>
        <result column="rating"         property="rating"/>
        <result column="started_at"     property="startedAt"/>
        <result column="completed_at"   property="completedAt"/>
        <result column="created_at"     property="createdAt"/>
        <result column="updated_at"     property="updatedAt"/>
        <result column="last_studied_at" property="lastStudiedAt"/>
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, student_id, lesson_id, course_id, progress, completed, watch_time,
        view_count, last_position, status, notes, rating,
        started_at, completed_at, created_at, updated_at, last_studied_at
    </sql>

    <!-- 插入学习进度 -->
    <insert id="insertLessonProgress" parameterType="com.noncore.assessment.entity.LessonProgress" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO lesson_progress (
            student_id, lesson_id, course_id, progress, completed, watch_time,
            view_count, last_position, status, notes, rating,
            started_at, completed_at, created_at, updated_at, last_studied_at
        ) VALUES (
                     #{studentId}, #{lessonId}, #{courseId}, #{progress}, #{completed}, #{studyDuration},
                     #{viewCount}, #{lastPosition}, #{status}, #{notes}, #{rating},
                     #{startedAt}, #{completedAt}, #{createdAt}, #{updatedAt}, #{lastStudiedAt}
                 )
    </insert>

    <!-- 根据ID查询 -->
    <select id="selectLessonProgressById" parameterType="long" resultMap="LessonProgressResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM lesson_progress
        WHERE id = #{id}
    </select>

    <!-- 更新学习进度 -->
    <update id="updateLessonProgress" parameterType="com.noncore.assessment.entity.LessonProgress">
        UPDATE lesson_progress SET
                                   progress = #{progress},
                                   completed = #{completed},
                                   watch_time = #{studyDuration},
                                   view_count = #{viewCount},
                                   last_position = #{lastPosition},
                                   status = #{status},
                                   notes = #{notes},
                                   rating = #{rating},
                                   started_at = #{startedAt},
                                   completed_at = #{completedAt},
                                   updated_at = #{updatedAt},
                                   last_studied_at = #{lastStudiedAt},
                                   course_id = #{courseId}
        WHERE id = #{id}
    </update>

    <!-- 软删除学习进度 -->
    <update id="deleteLessonProgress" parameterType="long">
        UPDATE lesson_progress SET status = 'deleted', updated_at = NOW() WHERE id = #{id}
    </update>

    <!-- 根据学生和章节查询进度 -->
    <select id="selectByStudentAndLesson" resultMap="LessonProgressResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM lesson_progress
        WHERE student_id = #{studentId} AND lesson_id = #{lessonId}
    </select>

    <!-- 根据学生和课程查询进度列表 -->
    <select id="selectByStudentAndCourse" resultMap="LessonProgressResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM lesson_progress
        WHERE student_id = #{studentId} AND course_id = #{courseId}
        ORDER BY lesson_id
    </select>

    <!-- 最近学习章节列表 -->
    <select id="selectRecentStudiedLessons" resultType="map">
        SELECT
            lp.lesson_id      as lessonId,
            lp.course_id      as courseId,
            lp.progress       as progress,
            lp.last_studied_at as lastStudiedAt,
            l.title           as lessonTitle
        FROM lesson_progress lp
                 LEFT JOIN lessons l ON lp.lesson_id = l.id
        WHERE lp.student_id = #{studentId}
        ORDER BY lp.last_studied_at DESC
        LIMIT #{limit}
    </select>

    <!-- 计算总学习时长 -->
    <select id="calculateTotalStudyTime" resultType="int">
        SELECT COALESCE(SUM(watch_time), 0)
        FROM lesson_progress
        WHERE student_id = #{studentId}
        <if test="courseId != null">
            AND course_id = #{courseId}
        </if>
    </select>

    <!-- 计算整体进度 -->
<select id="calculateOverallProgress" resultType="java.math.BigDecimal">
  SELECT COALESCE(
           SUM(
             (CASE WHEN EXISTS (
                    SELECT 1
                    FROM assignments a
                    JOIN submissions s ON s.assignment_id = a.id
                    WHERE
                      s.student_id = lp.student_id
                      AND a.lesson_id = lp.lesson_id
                      AND a.assignment_type = 'course_bound'
                      AND a.deleted = FALSE
                      AND (s.status = 'submitted' OR s.status = 'graded')
                  )
                  THEN 100 ELSE lp.progress END) * COALESCE(l.weight, 1.00)
           ) / NULLIF(SUM(COALESCE(l.weight, 1.00)), 0)
         , 0)
  FROM lesson_progress lp
  JOIN lessons l ON lp.lesson_id = l.id
  WHERE lp.student_id = #{studentId}
</select>

    <!-- 计算学生在某课程的整体加权进度（0-100） -->
<select id="calculateCourseOverallProgress" resultType="java.math.BigDecimal">
  SELECT COALESCE(
           SUM(
             (CASE WHEN EXISTS (
                    SELECT 1
                    FROM assignments a
                    JOIN submissions s ON s.assignment_id = a.id
                    WHERE
                      s.student_id = lp.student_id
                      AND a.lesson_id = lp.lesson_id
                      AND a.assignment_type = 'course_bound'
                      AND a.deleted = FALSE
                      AND (s.status = 'submitted' OR s.status = 'graded')
                  )
                  THEN 100 ELSE lp.progress END) * COALESCE(l.weight, 1.00)
           ) / NULLIF(SUM(COALESCE(l.weight, 1.00)), 0)
         , 0)
  FROM lesson_progress lp
  JOIN lessons l ON lp.lesson_id = l.id
  WHERE lp.student_id = #{studentId}
    AND l.course_id = #{courseId}
</select>

    <!-- 获取学生学习统计 -->
    <select id="getStudentStudyStats" resultType="map">
        SELECT COUNT(*)                     as totalLessons,
               SUM(IF(completed = 1, 1, 0)) as completedLessons,
               COALESCE(AVG(progress), 0)   as averageProgress,
               COALESCE(SUM(watch_time), 0) as totalStudyTime
        FROM lesson_progress
        WHERE student_id = #{studentId}
    </select>

<!-- 计算课程完成率 -->
<select id="calculateCourseCompletionRate" resultType="java.math.BigDecimal">
  SELECT
    IF(
      COUNT(*) = 0, 0,
      SUM(
        CASE
          WHEN lp.completed = 1 THEN 1
          WHEN EXISTS (
            SELECT 1
            FROM assignments a
            JOIN submissions s ON s.assignment_id = a.id
            WHERE
              s.student_id = lp.student_id
              AND a.lesson_id = lp.lesson_id
              AND a.assignment_type = 'course_bound'
              AND a.deleted = FALSE
              AND (s.status = 'submitted' OR s.status = 'graded')
          ) THEN 1
          ELSE 0
        END
      ) * 100.0 / COUNT(*)
    ) AS completion_rate
  FROM lesson_progress lp
  JOIN lessons l ON lp.lesson_id = l.id
  WHERE
    lp.student_id = #{studentId}
    AND l.course_id = #{courseId}
</select>

    <!-- 学习热力图数据 -->
    <select id="getStudyHeatmapData" resultType="map">
        SELECT
            DATE(last_studied_at) as date,
            SUM(watch_time) as studyTime,
            COUNT(DISTINCT lesson_id) as completedLessons
        FROM lesson_progress
        WHERE student_id = #{studentId}
          AND last_studied_at >= DATE_SUB(NOW(), INTERVAL #{days} DAY)
        GROUP BY DATE(last_studied_at)
        ORDER BY date
    </select>

    <!-- 重置课程进度 -->
    <update id="resetCourseProgress">
        UPDATE lesson_progress
        SET
            progress = 0,
            completed = 0,
            completed_at = NULL,
            watch_time = 0,
            last_position = 0,
            updated_at = NOW()
        WHERE student_id = #{studentId} AND course_id = #{courseId}
    </update>

    <!-- 更新进度 -->
    <update id="updateProgress">
        UPDATE lesson_progress
        SET
            progress = #{progress},
            last_position = #{lastPosition},
            last_studied_at = NOW(),
            updated_at = NOW()
        WHERE student_id = #{studentId} AND lesson_id = #{lessonId}
    </update>

    <!-- 标记章节完成 -->
    <update id="markLessonCompleted">
        UPDATE lesson_progress
        SET
            completed = 1,
            progress = 100,
            completed_at = NOW(),
            updated_at = NOW()
        WHERE student_id = #{studentId} AND lesson_id = #{lessonId}
    </update>

    <!-- 更新评分 -->
    <update id="updateRating">
        UPDATE lesson_progress
        SET
            rating = #{rating},
            updated_at = NOW()
        WHERE student_id = #{studentId} AND lesson_id = #{lessonId}
    </update>

    <!-- 根据学生、课程和章节查询进度 -->
    <select id="selectByStudentCourseLesson" resultMap="LessonProgressResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM lesson_progress
        WHERE student_id = #{studentId}
        <if test="courseId != null">
            AND course_id = #{courseId}
        </if>
        AND lesson_id = #{lessonId}
    </select>

    <!-- 删除某课程下所有学生进度 -->
    <delete id="deleteByCourseId">
        DELETE FROM lesson_progress WHERE course_id = #{courseId}
    </delete>

    <!-- 计算学生最近一周学习时长 -->
    <select id="calculateWeeklyStudyTime" resultType="long">
        SELECT COALESCE(SUM(watch_time), 0)
        FROM lesson_progress
        WHERE student_id = #{studentId}
          AND updated_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)
    </select>

    <!-- 教师所有课程的平均评分 -->
    <select id="getAverageRatingByTeacher" resultType="double">
        SELECT COALESCE(AVG(lp.rating), 0.0)
        FROM lesson_progress lp
                 JOIN lessons l ON lp.lesson_id = l.id
                 JOIN courses c ON l.course_id = c.id
        WHERE c.teacher_id = #{teacherId} AND lp.rating IS NOT NULL
    </select>

    <!-- 教师所有学生的平均课程完成率 -->
    <select id="getAverageCompletionRateByTeacher" resultType="double">
        SELECT COALESCE(AVG(main.completion_rate), 0.0)
        FROM (
                 SELECT AVG(lp.progress) as completion_rate
                 FROM lesson_progress lp
                          JOIN lessons l ON lp.lesson_id = l.id
                          JOIN courses c ON l.course_id = c.id
                 WHERE c.teacher_id = #{teacherId}
                 GROUP BY lp.student_id, l.course_id
             ) main
    </select>

</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.GradeMapper">

    <resultMap id="GradeResultMap" type="com.noncore.assessment.entity.Grade">
        <id column="id" property="id"/>
        <result column="student_id" property="studentId"/>
        <result column="assignment_id" property="assignmentId"/>
        <result column="submission_id" property="submissionId"/>
        <result column="grader_id" property="graderId"/>
        <result column="score" property="score"/>
        <result column="max_score" property="maxScore"/>
        <result column="percentage" property="percentage"/>
        <result column="grade_level" property="gradeLevel"/>
        <result column="feedback" property="feedback"/>
        <result column="status" property="status"/>
        <result column="strengths" property="strengths"/>
        <result column="improvements" property="improvements"/>
        <result column="allow_resubmit" property="allowResubmit"/>
        <result column="resubmit_until" property="resubmitUntil"/>
        <result column="rubric_json" property="rubricJson"/>
        <result column="regrade_reason" property="regradeReason"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="published_at" property="publishedAt"/>
        <result column="deleted" property="deleted"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, student_id, assignment_id, submission_id, grader_id, score, max_score, percentage,
        grade_level, feedback, status, strengths, improvements, allow_resubmit, resubmit_until, rubric_json, regrade_reason,
        created_at, updated_at, published_at, deleted
    </sql>

    <!-- 插入成绩 -->
    <insert id="insertGrade" parameterType="com.noncore.assessment.entity.Grade" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO grades (
            student_id, assignment_id, submission_id, grader_id,
            score, max_score, percentage, grade_level,
            feedback, status, strengths, improvements, allow_resubmit, resubmit_until, rubric_json, regrade_reason,
            created_at, updated_at, published_at, deleted
        ) VALUES (
                     #{studentId}, #{assignmentId}, #{submissionId}, #{graderId},
                     #{score}, #{maxScore}, #{percentage}, #{gradeLevel},
                     #{feedback}, #{status}, #{strengths}, #{improvements}, #{allowResubmit}, #{resubmitUntil}, #{rubricJson}, #{regradeReason},
                     #{createdAt}, #{updatedAt}, #{publishedAt}, #{deleted}
                 )
    </insert>

    <!-- 根据ID查询成绩 -->
    <select id="selectGradeById" parameterType="long" resultMap="GradeResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM grades
        WHERE id = #{id} AND deleted = false
    </select>

    <!-- 根据学生ID查询成绩列表 -->
    <select id="selectByStudentId" parameterType="long" resultMap="GradeResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM grades
        WHERE student_id = #{studentId} AND deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 根据作业ID查询成绩列表 -->
    <select id="selectByAssignmentId" parameterType="long" resultMap="GradeResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM grades
        WHERE assignment_id = #{assignmentId} AND deleted = false
        ORDER BY created_at DESC
    </select>

    <!-- 更新成绩（仅更新非空字段，避免将字段置空覆盖默认值） -->
    <update id="updateGrade" parameterType="com.noncore.assessment.entity.Grade">
        UPDATE grades
        <set>
            <if test="score != null">score = #{score},</if>
            <if test="maxScore != null">max_score = #{maxScore},</if>
            <if test="percentage != null">percentage = #{percentage},</if>
            <if test="gradeLevel != null">grade_level = #{gradeLevel},</if>
            <if test="feedback != null">feedback = #{feedback},</if>
            <if test="status != null">status = #{status},</if>
            <if test="strengths != null">strengths = #{strengths},</if>
            <if test="improvements != null">improvements = #{improvements},</if>
            <if test="allowResubmit != null">allow_resubmit = #{allowResubmit},</if>
            <if test="resubmitUntil != null">resubmit_until = #{resubmitUntil},</if>
            <if test="rubricJson != null">rubric_json = #{rubricJson},</if>
            <if test="regradeReason != null">regrade_reason = #{regradeReason},</if>
            <if test="submissionId != null">submission_id = #{submissionId},</if>
            <if test="graderId != null">grader_id = #{graderId},</if>
            <if test="publishedAt != null">published_at = #{publishedAt},</if>
            updated_at = #{updatedAt}
        </set>
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 删除成绩（软删除） -->
    <update id="deleteGrade" parameterType="long">
        UPDATE grades SET deleted = true, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 根据学生和作业查询成绩 -->
    <select id="selectByStudentAndAssignment" resultMap="GradeResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM grades
        WHERE student_id = #{studentId}
        AND assignment_id = #{assignmentId}
        AND deleted = false
    </select>

    <!-- 根据学生和课程查询成绩 -->
    <select id="selectByStudentAndCourse" resultMap="GradeResultMap">
        SELECT g.<include refid="Base_Column_List"/>
        FROM grades g
        INNER JOIN assignments a ON g.assignment_id = a.id
        WHERE g.student_id = #{studentId}
        AND a.course_id = #{courseId}
        AND g.deleted = false
    </select>

    <!-- 根据课程查询成绩 -->
    <select id="selectByCourseId" resultMap="GradeResultMap">
        SELECT g.<include refid="Base_Column_List"/>
        FROM grades g
        INNER JOIN assignments a ON g.assignment_id = a.id
        WHERE a.course_id = #{courseId}
        AND g.deleted = false
    </select>

    <!-- 分页查询学生成绩 -->
    <select id="selectByStudentIdWithPagination" resultMap="GradeResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM grades
        WHERE student_id = #{studentId}
        AND deleted = false
        ORDER BY created_at DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 根据学生ID查询成绩，支持可选课程过滤（配合 PageHelper 使用）
         使用 EXISTS 避免列名歧义与不必要的联表开销 -->
    <select id="selectByStudentIdFiltered" resultMap="GradeResultMap">
        SELECT
            g.id,
            g.student_id,
            g.assignment_id,
            g.submission_id,
            g.grader_id,
            g.score,
            g.max_score,
            g.percentage,
            g.grade_level,
            g.feedback,
            g.status,
            g.strengths,
            g.improvements,
            g.allow_resubmit,
            g.rubric_json,
            g.regrade_reason,
            g.created_at,
            g.updated_at,
            g.published_at,
            g.deleted
        FROM grades g
        WHERE g.student_id = #{studentId}
          AND g.deleted = false
        <if test="courseId != null">
          AND EXISTS (
            SELECT 1 FROM assignments a
            WHERE a.id = g.assignment_id AND a.course_id = #{courseId}
          )
        </if>
        ORDER BY g.created_at DESC
    </select>

    <!-- 分页查询作业成绩 -->
    <select id="selectByAssignmentIdWithPagination" resultMap="GradeResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM grades
        WHERE assignment_id = #{assignmentId}
        AND deleted = false
        ORDER BY score DESC
        LIMIT #{size} OFFSET #{offset}
    </select>

    <!-- 统计学生成绩数量 -->
    <select id="countByStudentId" resultType="long">
        SELECT COUNT(*)
        FROM grades
        WHERE student_id = #{studentId}
          AND deleted = false
    </select>

    <!-- 统计作业成绩数量 -->
    <select id="countByAssignmentId" resultType="long">
        SELECT COUNT(*)
        FROM grades
        WHERE assignment_id = #{assignmentId}
          AND deleted = false
    </select>

    <!-- 根据教师ID获取待评分成绩 -->
    <select id="selectPendingGrades" resultMap="GradeResultMap">
        SELECT g.<include refid="Base_Column_List"/>
        FROM grades g
        INNER JOIN assignments a ON g.assignment_id = a.id
        WHERE a.teacher_id = #{teacherId}
        AND g.status = 'draft'
        AND g.deleted = false
        ORDER BY g.created_at ASC
    </select>

    <!-- 分页获取待评分成绩 -->
    <select id="selectPendingGradesWithPagination" resultMap="GradeResultMap">
        SELECT g.<include refid="Base_Column_List"/>
        FROM grades g
        INNER JOIN assignments a ON g.assignment_id = a.id
        WHERE a.teacher_id = #{teacherId}
        AND g.status = 'draft'
        AND g.deleted = false
        ORDER BY g.created_at ASC
    </select>

    <!-- 计算学生平均分 -->
    <select id="calculateAverageScore" resultType="java.math.BigDecimal">
        SELECT COALESCE(AVG(score), 0) as average_score
        FROM grades
        WHERE student_id = #{studentId}
          AND status = 'published'
          AND deleted = false
    </select>

    <!-- 计算学生课程平均分 -->
    <select id="calculateCourseAverageScore" resultType="java.math.BigDecimal">
        SELECT COALESCE(AVG(g.score), 0) as average_score
        FROM grades g
                 INNER JOIN assignments a ON g.assignment_id = a.id
        WHERE g.student_id = #{studentId}
          AND a.course_id = #{courseId}
          AND g.status = 'published'
          AND g.deleted = false
    </select>

    <!-- 计算作业平均分 -->
    <select id="calculateAssignmentAverageScore" resultType="java.math.BigDecimal">
        SELECT COALESCE(AVG(score), 0) as average_score
        FROM grades
        WHERE assignment_id = #{assignmentId}
          AND status = 'published'
          AND deleted = false
    </select>

    <!-- 获取成绩分布 -->
    <select id="getGradeDistribution" resultType="map">
        SELECT
            CASE
                WHEN percentage >= 90 THEN 'A'
                WHEN percentage >= 80 THEN 'B'
                WHEN percentage >= 70 THEN 'C'
                WHEN percentage >= 60 THEN 'D'
                ELSE 'F'
                END as grade_level,
            COUNT(*) as count,
            ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM grades WHERE assignment_id = #{assignmentId} AND deleted = false), 2) as percentage
        FROM grades
        WHERE assignment_id = #{assignmentId}
          AND status = 'published'
          AND deleted = false
        GROUP BY grade_level
        ORDER BY grade_level
    </select>

    <!-- 获取课程成绩统计 -->
    <select id="getCourseGradeStats" resultType="map">
        SELECT
            COUNT(*) as totalGrades,
            COALESCE(AVG(g.score), 0) as averageScore,
            COALESCE(MAX(g.score), 0) as highestScore,
            COALESCE(MIN(g.score), 0) as lowestScore,
            COUNT(DISTINCT g.student_id) as totalStudents,
            COUNT(DISTINCT g.assignment_id) as totalAssignments
        FROM grades g
                 INNER JOIN assignments a ON g.assignment_id = a.id
        WHERE a.course_id = #{courseId}
          AND g.status = 'published'
          AND g.deleted = false
    </select>

    <!-- 获取课程成绩分布 -->
    <select id="getCourseGradeDistribution" resultType="map">
        SELECT
            CASE
                WHEN g.percentage >= 90 THEN 'A'
                WHEN g.percentage >= 80 THEN 'B'
                WHEN g.percentage >= 70 THEN 'C'
                WHEN g.percentage >= 60 THEN 'D'
                ELSE 'F'
            END as gradeLevel,
            COUNT(*) as count,
            ROUND(COUNT(*) * 100.0 / NULLIF((
                SELECT COUNT(*) FROM grades g2
                INNER JOIN assignments a2 ON g2.assignment_id = a2.id
                WHERE a2.course_id = #{courseId}
                  AND g2.status = 'published'
                  AND g2.deleted = false
            ), 0), 2) as percentage
        FROM grades g
        INNER JOIN assignments a ON g.assignment_id = a.id
        WHERE a.course_id = #{courseId}
          AND g.status = 'published'
          AND g.deleted = false
        GROUP BY gradeLevel
        ORDER BY gradeLevel
    </select>

    <!-- 查询用于导出的成绩数据 -->
    <select id="selectGradesForExport" resultType="map">
        SELECT
        u.username as studentName,
        u.email as studentEmail,
        c.title as courseTitle,
        a.title as assignmentTitle,
        g.score,
        g.max_score as maxScore,
        g.percentage,
        g.grade_level,
        g.feedback,
        g.status,
        g.created_at as createdAt,
        g.updated_at as updatedAt
        FROM grades g
        JOIN users u ON g.student_id = u.id
        JOIN assignments a ON g.assignment_id = a.id
        JOIN courses c ON a.course_id = c.id
        WHERE g.deleted = false
        <if test="courseId != null">
            AND a.course_id = #{courseId}
        </if>
        <if test="assignmentId != null">
            AND g.assignment_id = #{assignmentId}
        </if>
        <if test="studentId != null">
            AND g.student_id = #{studentId}
        </if>
        ORDER BY c.title, a.title, u.username
    </select>

    <!-- 查询学生成绩趋势 -->
    <select id="selectGradeTrendByStudentAndCourse" resultType="map">
        SELECT
        a.title as assignmentTitle,
        g.score,
        g.percentage,
        g.grade_level,
        g.created_at as gradedAt
        FROM grades g
        JOIN assignments a ON g.assignment_id = a.id
        WHERE g.student_id = #{studentId}
        AND g.deleted = false
        AND g.status = 'published'
        <if test="courseId != null">
            AND a.course_id = #{courseId}
        </if>
        <if test="startDate != null and endDate != null">
            AND g.created_at BETWEEN #{startDate} AND #{endDate}
        </if>
        ORDER BY g.created_at
    </select>

    <!-- 查询单条成绩的历史记录 -->
    <select id="selectGradeHistoryByGradeId" resultType="map">
        SELECT
            g.id as id,
            g.score as score,
            g.max_score as maxScore,
            g.percentage as percentage,
            g.grade_level as gradeLevel,
            g.feedback as feedback,
            g.strengths as strengths,
            g.improvements as improvements,
            g.status as status,
            DATE_FORMAT(COALESCE(g.published_at, g.updated_at, g.created_at), '%Y-%m-%d %H:%i:%s') as gradedAt,
            grader.username as graderName
        FROM grades g
        LEFT JOIN users grader ON g.grader_id = grader.id
        WHERE g.id = #{gradeId}
    </select>

    <!-- 按天统计学生平均分（用于趋势图） -->
    <select id="selectDailyAvgScore" resultType="map">
        SELECT DATE(g.created_at) AS x,
               ROUND(AVG(g.score), 2) AS y
        FROM grades g
        WHERE g.student_id = #{studentId}
          AND g.status = 'published'
          AND g.deleted = false
          AND g.created_at BETWEEN #{start} AND #{end}
        GROUP BY DATE(g.created_at)
        ORDER BY DATE(g.created_at)
    </select>

    <!-- 学生近期成绩（用于仪表盘） -->
    <select id="findRecentGradesByStudent" resultType="com.noncore.assessment.dto.response.StudentDashboardResponse$RecentGradeDto">
        SELECT
            g.assignment_id AS assignmentId,
            a.title AS assignmentTitle,
            c.title AS courseTitle,
            g.score AS score,
            DATE_FORMAT(COALESCE(g.published_at, g.updated_at, g.created_at), '%Y-%m-%d %H:%i:%s') AS gradedAt
        FROM grades g
                 JOIN assignments a ON g.assignment_id = a.id
                 JOIN courses c ON a.course_id = c.id
        WHERE g.student_id = #{studentId}
          AND g.status = 'published'
          AND g.deleted = false
        ORDER BY COALESCE(g.published_at, g.updated_at, g.created_at) DESC
        LIMIT #{limit}
    </select>

</mapper>
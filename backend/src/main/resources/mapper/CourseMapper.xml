<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.noncore.assessment.mapper.CourseMapper">

    <!-- 课程结果映射 -->
    <resultMap id="CourseResultMap" type="com.noncore.assessment.entity.Course">
        <id column="id" property="id"/>
        <result column="title" property="title"/>
        <result column="description" property="description"/>
        <result column="cover_image" property="coverImage"/>
        <result column="content" property="content"/>
        <result column="teacher_id" property="teacherId"/>
        <result column="teacher_name" property="teacherName"/>
        <result column="category" property="category"/>
        <result column="difficulty" property="difficulty"/>
        <result column="duration" property="duration"/>
        <result column="max_students" property="maxStudents"/>
        <result column="status" property="status"/>
        <result column="start_date" property="startDate"/>
        <result column="end_date" property="endDate"/>
        <result column="objectives" property="objectives"/>
        <result column="requirements" property="requirements"/>
        <result column="price" property="price"/>
        <result column="tags" property="tags"/>
        <result column="require_enroll_key" property="requireEnrollKey"/>
        <result column="enroll_key_hash" property="enrollKeyHash"/>
        <result column="enrollment_count" property="enrollmentCount"/>
        <result column="rating" property="rating"/>
        <result column="review_count" property="reviewCount"/>
        <result column="created_at" property="createdAt"/>
        <result column="updated_at" property="updatedAt"/>
        <result column="deleted" property="deleted"/>
    </resultMap>

    <!-- 基础查询字段 -->
    <sql id="Base_Column_List">
        c.id, c.title, c.description, c.content, c.cover_image, c.teacher_id, c.category, c.difficulty,
        c.duration, c.max_students, c.status, c.start_date, c.end_date, c.objectives,
        c.requirements, c.price, c.tags, c.require_enroll_key, c.enroll_key_hash, c.enrollment_count, c.rating, c.review_count,
        c.created_at, c.updated_at, c.deleted
    </sql>

    <!-- 带教师信息的查询字段 -->
    <sql id="Course_With_Teacher_Column_List">
        <include refid="Base_Column_List"/>,
        COALESCE(u.nickname, u.username) as teacher_name
    </sql>

    <!-- 插入课程 -->
    <insert id="insertCourse" parameterType="com.noncore.assessment.entity.Course" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO courses (
            title, description, content, cover_image, teacher_id, category, difficulty, duration,
            max_students, status, start_date, end_date, objectives, requirements,
            price, tags, require_enroll_key, enroll_key_hash, enrollment_count, rating, review_count,
            created_at, updated_at, deleted
        ) VALUES (
                      #{title}, #{description}, #{content}, #{coverImage}, #{teacherId}, #{category}, #{difficulty}, #{duration},
                     #{maxStudents}, #{status}, #{startDate}, #{endDate}, #{objectives}, #{requirements},
                     #{price}, #{tags}, #{requireEnrollKey}, #{enrollKeyHash}, #{enrollmentCount}, #{rating}, #{reviewCount},
                     #{createdAt}, #{updatedAt}, #{deleted}
                 )
    </insert>

    <!-- 根据ID查询课程 -->
    <select id="selectCourseById" parameterType="long" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.id = #{id} AND c.deleted = false
    </select>

    <!-- 更新课程信息 -->
    <update id="updateCourse" parameterType="com.noncore.assessment.entity.Course">
        UPDATE courses SET
                           title = #{title},
                           description = #{description},
                            cover_image = #{coverImage},
                            content = #{content},
                           category = #{category},
                           difficulty = #{difficulty},
                           duration = #{duration},
                           max_students = #{maxStudents},
                           status = #{status},
                           start_date = #{startDate},
                           end_date = #{endDate},
                           objectives = #{objectives},
                           requirements = #{requirements},
                           price = #{price},
                           tags = #{tags},
                           require_enroll_key = #{requireEnrollKey},
                           enroll_key_hash = #{enrollKeyHash},
                           enrollment_count = #{enrollmentCount},
                           rating = #{rating},
                           review_count = #{reviewCount},
                           updated_at = #{updatedAt}
        WHERE id = #{id} AND deleted = false
    </update>

    <!-- 软删除课程 -->
    <update id="deleteCourse" parameterType="long">
        UPDATE courses SET
                           deleted = true,
                           updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 分页查询课程列表 -->
    <select id="selectCoursesWithPagination" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.deleted = false
        <if test="keyword != null and keyword != ''">
            AND (c.title LIKE CONCAT('%', #{keyword}, '%')
            OR c.description LIKE CONCAT('%', #{keyword}, '%')
        OR COALESCE(u.nickname, u.username) LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        <if test="category != null and category != ''">
            AND c.category = #{category}
        </if>
        <if test="difficulty != null and difficulty != ''">
            AND c.difficulty = #{difficulty}
        </if>
        <if test="status != null and status != ''">
            AND c.status = #{status}
        </if>
        <if test="teacherId != null">
            AND c.teacher_id = #{teacherId}
        </if>
        ORDER BY c.created_at DESC
    </select>

    <!-- 根据教师ID查询课程 -->
    <select id="selectCoursesByTeacherId" parameterType="long" resultMap="CourseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM courses c
        WHERE c.teacher_id = #{teacherId} AND c.deleted = false
        ORDER BY c.created_at DESC
    </select>

    <!-- 根据学生ID查询已选课程 -->
    <select id="selectCoursesByStudentId" parameterType="long" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        INNER JOIN enrollments e ON c.id = e.course_id
        WHERE e.student_id = #{studentId} AND c.deleted = false AND e.status IN ('active','completed')
        ORDER BY e.enrolled_at DESC
    </select>

    <!-- 查询热门课程 -->
    <select id="selectPopularCourses" parameterType="int" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.deleted = false AND c.status = 'published'
        ORDER BY c.enrollment_count DESC, c.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 查询推荐课程 -->
    <select id="selectRecommendedCourses" parameterType="int" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.deleted = false AND c.status = 'published'
        ORDER BY c.rating DESC, c.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 根据分类查询课程 -->
    <select id="selectCoursesByCategory" parameterType="string" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.category = #{category} AND c.deleted = false AND c.status = 'published'
        ORDER BY c.created_at DESC
    </select>

    <!-- 更新课程报名人数 -->
    <update id="updateEnrollmentCount">
        UPDATE courses SET
                           enrollment_count = enrollment_count + #{increment},
                           updated_at = NOW()
        WHERE id = #{courseId} AND deleted = false
    </update>

    <!-- 更新课程评分和评价数量 -->
    <update id="updateCourseRating">
        UPDATE courses SET
                           rating = #{rating},
                           review_count = #{reviewCount},
                           updated_at = NOW()
        WHERE id = #{courseId} AND deleted = false
    </update>

    <!-- 统计课程数量 -->
    <select id="countCourses" resultType="int">
        SELECT COUNT(1) FROM courses
        WHERE deleted = false
        <if test="teacherId != null">
            AND teacher_id = #{teacherId}
        </if>
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
    </select>

    <!-- 检查课程是否存在 -->
    <select id="checkCourseExists" parameterType="long" resultType="int">
        SELECT COUNT(1) FROM courses
        WHERE id = #{id} AND deleted = false
    </select>

    <!-- 根据标题查找课程 -->
    <select id="selectCoursesByTitle" resultMap="CourseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM courses c
        WHERE c.title = #{title} AND c.deleted = false
        <if test="excludeId != null">
            AND c.id != #{excludeId}
        </if>
    </select>

    <!-- 批量更新课程状态 -->
    <update id="batchUpdateCourseStatus">
        UPDATE courses SET
        status = #{status},
        updated_at = NOW()
        WHERE deleted = false AND id IN
        <foreach collection="courseIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <!-- 查询即将开始的课程 -->
    <select id="selectUpcomingCourses" parameterType="int" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.deleted = false AND c.status = 'published'
        AND c.start_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL #{days} DAY)
        ORDER BY c.start_date
    </select>

    <!-- 查询即将结束的课程 -->
    <select id="selectEndingCourses" parameterType="int" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.deleted = false AND c.status = 'published'
        AND c.end_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL #{days} DAY)
        ORDER BY c.end_date
    </select>

    <!-- 根据关键词搜索课程 -->
    <select id="searchCourses" parameterType="string" resultMap="CourseResultMap">
        SELECT <include refid="Course_With_Teacher_Column_List"/>
        FROM courses c
        LEFT JOIN users u ON c.teacher_id = u.id
        WHERE c.deleted = false AND c.status = 'published'
        AND (c.title LIKE CONCAT('%', #{keyword}, '%')
        OR c.description LIKE CONCAT('%', #{keyword}, '%')
        OR c.category LIKE CONCAT('%', #{keyword}, '%'))
        ORDER BY c.created_at DESC, c.rating DESC
    </select>

    <!-- 获取课程统计信息 -->
    <select id="getCourseStatistics" resultType="map">
        SELECT
        status,
        COUNT(*) AS count,
        AVG(price) AS avg_price
        FROM courses
        WHERE deleted = false
        <if test="teacherId != null">
            AND teacher_id = #{teacherId}
        </if>
        GROUP BY status
    </select>

    <!-- 统计学生的活跃课程数量 -->
    <select id="countActiveCoursesByStudent" resultType="long">
        SELECT COUNT(DISTINCT c.id)
        FROM courses c
                 JOIN enrollments e ON c.id = e.course_id
        WHERE e.student_id = #{studentId}
          AND c.deleted = false
          AND (
              e.status IN ('active','completed','ACTIVE','COMPLETED','enrolled','ENROLLED')
              OR e.status IN ('1','2')
              OR e.status IS NULL
          )
    </select>

    <!-- 获取学生最近活跃的课程列表 (DTO) - 以选课为基础，辅以学习进度排序，更稳健 -->
    <select id="findRecentCoursesByStudent" resultType="com.noncore.assessment.dto.response.StudentDashboardResponse$RecentCourseDto">
        SELECT
            c.id,
            c.title,
            COALESCE(u.nickname, u.username) AS teacherName,
            COALESCE(cp.avg_progress, 0) AS progress,
            c.cover_image AS coverImage,
            cp.last_studied AS lastStudied
        FROM enrollments e
                 JOIN courses c ON e.course_id = c.id
                 LEFT JOIN users u ON c.teacher_id = u.id
                 LEFT JOIN (
            SELECT
                l.course_id,
                AVG(lp.progress) as avg_progress,
                MAX(lp.last_studied_at) as last_studied
            FROM lesson_progress lp
                     JOIN lessons l ON lp.lesson_id = l.id
            WHERE lp.student_id = #{studentId}
            GROUP BY l.course_id
        ) cp ON c.id = cp.course_id
        WHERE e.student_id = #{studentId}
        ORDER BY COALESCE(cp.last_studied, e.enrolled_at) DESC
        LIMIT #{limit}
    </select>

    <!-- 根据学生ID查询课程列表 -->
    <select id="findCoursesByStudentId" resultMap="CourseResultMap">
        SELECT c.*
        FROM courses c
                 JOIN enrollments e ON c.id = e.course_id
        WHERE e.student_id = #{studentId} AND c.deleted = false
        ORDER BY e.enrolled_at DESC
    </select>

    <!-- 统计教师的活跃课程数量 -->
    <select id="countActiveByTeacher" resultType="long">
        SELECT COUNT(*)
        FROM courses
        WHERE teacher_id = #{teacherId} AND status = 'published' AND deleted = false
    </select>

    <!-- 获取教师的活跃课程列表及统计信息 -->
    <select id="findActiveWithStatsByTeacher" resultType="com.noncore.assessment.dto.response.TeacherDashboardResponse$ActiveCourseDto">
        SELECT
            c.id,
            c.title,
            c.updated_at AS updatedAt,
            stats.enrolled_students AS enrolledStudents,
            stats.active_students AS activeStudents,
            stats.avg_progress AS avgProgress,
            stats.pending_grades AS pendingGrades
        FROM courses c
                 LEFT JOIN (
            SELECT
                c_inner.id as course_id,
                COUNT(DISTINCT e_inner.student_id) as enrolled_students,
                COUNT(DISTINCT CASE WHEN e_inner.last_access_time >= DATE_SUB(NOW(), INTERVAL 7 DAY) THEN e_inner.student_id END) as active_students,
                COALESCE(AVG(lp_inner.progress), 0) as avg_progress,
                COUNT(DISTINCT CASE WHEN s_inner.status = 'submitted' THEN s_inner.id END) as pending_grades
            FROM courses c_inner
                     LEFT JOIN enrollments e_inner ON c_inner.id = e_inner.course_id
                     LEFT JOIN lessons l_inner ON c_inner.id = l_inner.course_id
                     LEFT JOIN lesson_progress lp_inner ON l_inner.id = lp_inner.lesson_id AND e_inner.student_id = lp_inner.student_id
                     LEFT JOIN assignments a_inner ON c_inner.id = a_inner.course_id
                     LEFT JOIN submissions s_inner ON a_inner.id = s_inner.assignment_id AND e_inner.student_id = s_inner.student_id
            WHERE c_inner.teacher_id = #{teacherId}
            GROUP BY c_inner.id
        ) stats ON c.id = stats.course_id
        WHERE c.teacher_id = #{teacherId} AND c.status = 'published' AND c.deleted = false
        ORDER BY c.updated_at DESC
        LIMIT #{limit}
    </select>

    <select id="checkTitleExists" resultType="int">
        SELECT COUNT(1)
        FROM courses
        WHERE title = #{title} AND deleted = false
        <if test="excludeId != null">
            AND id != #{excludeId}
        </if>
    </select>

    <select id="findByTeacherId" resultMap="CourseResultMap">
        SELECT * FROM courses
        WHERE teacher_id = #{teacherId} AND deleted = false
        ORDER BY created_at DESC
    </select>
</mapper>